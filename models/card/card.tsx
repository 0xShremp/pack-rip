/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./models/card/card.gltf --transform 
Files: ./models/card/card.gltf [4.48KB] > /Users/tillhinrichs/_DEV/PACK_RIP/react/card-transformed.glb [82.38KB] (-1739%)
*/

import { useGLTF, useTexture } from "@react-three/drei";
import { useGraph } from "@react-three/fiber";
import React from "react";
import * as THREE from "three";
import { SkeletonUtils } from "three-stdlib";

export interface CardProps {
  frontImage: string;
  backImage: string;
  position: [number, number, number];
  rotation?: [number, number, number];
}

export function Card({
  frontImage,
  backImage,
  position,
  rotation = [0, 0, 0],
}: CardProps) {
  const { scene } = useGLTF("/models/card-transformed.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as unknown as {
    nodes: {
      Cube: THREE.Mesh;
      Cube_1: THREE.Mesh;
      Cube_2: THREE.Mesh;
    };
    materials: {
      cardFront: THREE.MeshStandardMaterial;
      cardBack: THREE.MeshStandardMaterial;
      cardEdge: THREE.MeshStandardMaterial;
    };
  };

  const frontTexture = useTexture(frontImage, (loadedTexture) => {
    if (Array.isArray(loadedTexture)) return;
    loadedTexture.flipY = false;
    loadedTexture.colorSpace = THREE.SRGBColorSpace;
  });

  const backTexture = useTexture(backImage, (loadedTexture) => {
    if (Array.isArray(loadedTexture)) return;
    loadedTexture.flipY = false;
    loadedTexture.colorSpace = THREE.SRGBColorSpace;
  });

  // Apply texture to material - create new material to avoid mutating
  const frontMaterial = React.useMemo(() => {
    if (frontTexture && materials.cardFront) {
      const mat = materials.cardFront.clone();
      (mat as THREE.MeshStandardMaterial).map = frontTexture;
      mat.needsUpdate = true;
      return mat;
    }
    return materials.cardFront;
  }, [frontTexture, materials.cardFront]);

  // Apply texture to material - create new material to avoid mutating
  const backMaterial = React.useMemo(() => {
    if (backTexture && materials.cardBack) {
      const mat = materials.cardBack.clone();
      (mat as THREE.MeshStandardMaterial).map = backTexture;
      mat.needsUpdate = true;
      return mat;
    }
    return materials.cardBack;
  }, [backTexture, materials.cardBack]);

  return (
    <group position={position} rotation={rotation} dispose={null}>
      <mesh geometry={nodes.Cube.geometry} material={frontMaterial} />
      <mesh geometry={nodes.Cube_1.geometry} material={backMaterial} />
      <mesh geometry={nodes.Cube_2.geometry} material={materials.cardEdge} />
    </group>
  );
}

useGLTF.preload("/models/card-transformed.glb");
